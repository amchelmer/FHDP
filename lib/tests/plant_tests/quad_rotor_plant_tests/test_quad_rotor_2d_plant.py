import numpy as np

from .test_quad_rotor_3d_plant import TestQuadRotor3DPlant
from ....controllers import FixedInputController
from ....plants.quad_rotor_plant import QuadRotor2DPlant

from numpy.testing import assert_array_almost_equal


class TestQuadRotor2DPlant(TestQuadRotor3DPlant):
    TIME_STEP = 0.005
    MOD = []
    STATE = np.array([[
        0.4, -0.1,
        1.1, -1.3,
        -0.14724409963507371,
        -0.013,
    ]]).T
    PREPROCESSED_STATE = np.array([[
        0.4, 0, -0.1,
        1.1, 0, -1.3,
        0.99729112, 0., -0.07355556, 0.,
        0, -0.013, 0,
    ]]).T
    ACTION = np.array([[
        0.1,
        -0.05
    ]]).T
    PREPROCESSED_ACTION = np.array([[
        1996.419953892139347,
        2070.292587897816247,
        2144.165221903493148,
        2070.292587897816247
    ]]).T
    ROTOR_SPEEDS = PREPROCESSED_ACTION.copy()
    POWER = np.array([[
        4.217271639637057,
        4.702957470488357,
        5.224570720121250,
        4.702957470488357,
    ]]).T
    OLD_ROTOR_SPEEDS = np.array([[
        2.086731445495136e3,
        2.158743311340219e3,
        2.249074142702545e3,
        2.174619748121829e3,
    ]]).T
    THRUST = np.array([[
        1.110349503204929,
        1.194041312808465,
        1.280773678810607,
        1.194041312808465,
    ]]).T
    VELOCITIES = np.array([
        [0.897370691014409, 0, -1.445366773517195],
        [0.897370691014409, 0, -1.447316773517195],
        [0.897370691014409, 0, -1.449266773517195],
        [0.897370691014409, 0, -1.447316773517195],
    ])
    THRUST_RATIOS = np.array([[
        0.933056019996218,
        0.932968834537269,
        0.932881662743790,
        0.932968834537269,
    ]]).T
    PROPELLER_FORCES_MOMENTS = np.array([[
        -0.017458606300047,
        0,
        -4.458835231353019,
        0,
        -0.023662177891632,
        -0.000002892298009,
    ]]).T
    FUSELAGE_FORCES_MOMENTS = np.array([[
        -0.111349179176490,
        0,
        0.195714399857616,
        0,
        0,
        0,
    ]]).T
    BODY_VELOCITY_VECTOR = np.array([[
        0.89737068,
        0,
        -1.44731678,
    ]]).T
    NEXT_STATE = np.array([[
        0.4055, -0.1065,
        1.105929042650453, -1.301393988228855,
        -0.14730909,
        -0.065582617536959,
    ]]).T
    DERIVATIVE = np.array([[
        +1.1, 0, -1.3,
        1.185808530090521, 0, -0.278797645770935,
        -0.000478111109145, 0, -0.006482392287364, 0,
        0, -10.516523507391861, -0.000642732890915,
    ]]).T
    INITIAL_STATE = np.array([[
        0, 0,
        0, 0,
        0,
        0
    ]]).T
    OUT_OF_BOUNDS_STATE = np.array([[
        0.4, -25.1,
        1.1, -1.3,
        0,
        -0.013,
    ]]).T
    VALIDATION_XYZ = np.array([
        [0.4, 0., -0.1],
        [0.4055, 0., -0.1065],
        [0.411029645213, 0., -0.113006969941],
        [0.416588888272, 0., -0.11952085509],
        [0.422177748811, 0., -0.126041585429],
        [0.427796312904, 0., -0.132569075657],
        [0.433444732496, 0., -0.139103225141],
        [0.439123224824, 0., -0.145643917827],
        [0.444832071832, 0., -0.1521910221],
        [0.450571619568, 0., -0.158744390597],
        [0.456342277582, 0., -0.165303859986],
        [0.462144518308, 0., -0.17186925069],
        [0.467978876429, 0., -0.178440366572],
        [0.473845948245, 0., -0.185016994582],
        [0.479746391009, 0., -0.191598904358],
        [0.485680922271, 0., -0.198185847786],
        [0.491650319188, 0., -0.204777558524],
        [0.497655417835, 0., -0.211373751484],
        [0.503697112491, 0., -0.217974122278],
        [0.509776354916, 0., -0.224578346628],
        [0.515894153601, 0., -0.231186079734],
        [0.522051573013, 0., -0.237796955616],
        [0.528249732809, 0., -0.244410586413],
        [0.534489807039, 0., -0.251026561657],
        [0.540773023324, 0., -0.257644447508],
        [0.547100662015, 0., -0.264263785964],
        [0.553474055324, 0., -0.270884094035],
        [0.55989458644, 0., -0.277504862897],
        [0.566363688611, 0., -0.284125557006],
        [0.572882844208, 0., -0.290745613202],
        [0.57945358376, 0., -0.297364439771],
        [0.586077484954, 0., -0.303981415498],
        [0.59275617162, 0., -0.310595888687],
        [0.599491312673, 0., -0.317207176166],
        [0.60628462103, 0., -0.323814562274],
        [0.613137852496, 0., -0.330417297818],
        [0.620052804612, 0., -0.337014599032],
        [0.62703131547, 0., -0.343605646507],
        [0.634075262495, 0., -0.35018958411],
        [0.641186561191, 0., -0.356765517896],
        [0.64836716384, 0., -0.36333251501],
        [0.655619058176, 0., -0.36988960257],
        [0.662944266007, 0., -0.37643576656],
        [0.670344841806, 0., -0.382969950708],
        [0.677822870887, 0., -0.38949105577],
        [0.685380467818, 0., -0.395997938535],
        [0.693019775318, 0., -0.402489410205],
        [0.700742962669, 0., -0.408964235281],
        [0.708552224089, 0., -0.415421130451],
        [0.716449777047, 0., -0.42185876349],
        [0.724437860543, 0., -0.428275752167],
        [0.732518733335, 0., -0.43467066317],
        [0.740694672111, 0., -0.441042011042],
        [0.748967969627, 0., -0.447388257133],
        [0.757340932782, 0., -0.453707808581],
        [0.765815880651, 0., -0.459999017306],
        [0.774395142466, 0., -0.466260179037],
        [0.783081055543, 0., -0.472489532364],
        [0.791875963169, 0., -0.478685257822],
        [0.800782212426, 0., -0.484845477008],
        [0.809802151973, 0., -0.490968251737],
        [0.818938129779, 0., -0.497051583238],
        [0.8281924908, 0., -0.503093411388],
        [0.837567574614, 0., -0.509091613998],
        [0.847065713002, 0., -0.515044006145],
        [0.856689227488, 0., -0.520948339554],
        [0.866440426826, 0., -0.526802302034],
        [0.876321604447, 0., -0.532603516983],
        [0.886335035858, 0., -0.538349542933],
        [0.896482975401, 0., -0.544037874229],
        [0.906767653725, 0., -0.549665940501],
        [0.917191275505, 0., -0.555231105678],
        [0.927756016685, 0., -0.560730667827],
        [0.938464021684, 0., -0.56616185906],
        [0.949317400574, 0., -0.571521845527],
        [0.960318226226, 0., -0.576807727491],
        [0.97146853143, 0., -0.58201653948],
        [0.982770305989, 0., -0.587145250534],
        [0.994225493797, 0., -0.592190764539],
        [1.005835989897, 0., -0.597149920652],
        [1.017603637524, 0., -0.60201949382],
        [1.029530225144, 0., -0.606796195399],
        [1.041617483485, 0., -0.611476673866],
        [1.053867082564, 0., -0.616057515637],
        [1.066280628721, 0., -0.620535245981],
        [1.078859661663, 0., -0.624906330044],
        [1.091605651514, 0., -0.629167173973],
        [1.104519995892, 0., -0.633314126145],
        [1.117604017003, 0., -0.637343478508],
        [1.130858958769, 0., -0.641251468023],
        [1.144285983984, 0., -0.645034278215],
        [1.157886171514, 0., -0.648688040833],
        [1.171660513547, 0., -0.652208837615],
        [1.185609912889, 0., -0.655592702159],
        [1.19973518032, 0., -0.6588356219],
        [1.214037032014, 0., -0.661933540192],
        [1.228516087033, 0., -0.664882358489],
        [1.243172864895, 0., -0.66767793863],
        [1.258007783223, 0., -0.670316105219],
        [1.273021155491, 0., -0.6727926481]
    ]).T
    VALIDATION_ATTITUDE = np.array([
        [0., -0.1472441, 0.],
        [0., -0.1473091, 0.],
        [0., -0.14763701, 0.],
        [0., -0.1482264, 0.],
        [0., -0.14907582, 0.],
        [0., -0.15018386, 0.],
        [0., -0.15154909, 0.],
        [0., -0.15317009, 0.],
        [0., -0.15504545, 0.],
        [0., -0.15717377, 0.],
        [0., -0.15955364, 0.],
        [0., -0.16218369, 0.],
        [0., -0.16506251, 0.],
        [0., -0.16818873, 0.],
        [0., -0.17156097, 0.],
        [0., -0.17517788, 0.],
        [0., -0.17903807, 0.],
        [0., -0.1831402, 0.],
        [0., -0.18748291, 0.],
        [0., -0.19206487, 0.],
        [0., -0.19688473, 0.],
        [0., -0.20194116, 0.],
        [0., -0.20723284, 0.],
        [0., -0.21275844, 0.],
        [0., -0.21851666, 0.],
        [0., -0.22450618, 0.],
        [0., -0.23072571, 0.],
        [0., -0.23717395, 0.],
        [0., -0.24384962, 0.],
        [0., -0.25075142, 0.],
        [0., -0.2578781, 0.],
        [0., -0.26522837, 0.],
        [0., -0.27280098, 0.],
        [0., -0.28059466, 0.],
        [0., -0.28860818, 0.],
        [0., -0.29684029, 0.],
        [0., -0.30528974, 0.],
        [0., -0.31395532, 0.],
        [0., -0.32283579, 0.],
        [0., -0.33192994, 0.],
        [0., -0.34123655, 0.],
        [0., -0.35075443, 0.],
        [0., -0.36048237, 0.],
        [0., -0.37041919, 0.],
        [0., -0.38056369, 0.],
        [0., -0.39091469, 0.],
        [0., -0.40147103, 0.],
        [0., -0.41223153, 0.],
        [0., -0.42319505, 0.],
        [0., -0.43436041, 0.],
        [0., -0.44572648, 0.],
        [0., -0.45729211, 0.],
        [0., -0.46905617, 0.],
        [0., -0.48101753, 0.],
        [0., -0.49317507, 0.],
        [0., -0.50552767, 0.],
        [0., -0.51807422, 0.],
        [0., -0.53081362, 0.],
        [0., -0.54374477, 0.],
        [0., -0.55686658, 0.],
        [0., -0.57017796, 0.],
        [0., -0.58367784, 0.],
        [0., -0.59736514, 0.],
        [0., -0.6112388, 0.],
        [0., -0.62529776, 0.],
        [0., -0.63954096, 0.],
        [0., -0.65396736, 0.],
        [0., -0.66857591, 0.],
        [0., -0.68336559, 0.],
        [0., -0.69833536, 0.],
        [0., -0.7134842, 0.],
        [0., -0.7288111, 0.],
        [0., -0.74431504, 0.],
        [0., -0.75999503, 0.],
        [0., -0.77585007, 0.],
        [0., -0.79187916, 0.],
        [0., -0.80808134, 0.],
        [0., -0.82445561, 0.],
        [0., -0.841001, 0.],
        [0., -0.85771657, 0.],
        [0., -0.87460134, 0.],
        [0., -0.89165437, 0.],
        [0., -0.90887472, 0.],
        [0., -0.92626145, 0.],
        [0., -0.94381362, 0.],
        [0., -0.96153033, 0.],
        [0., -0.97941065, 0.],
        [0., -0.99745367, 0.],
        [0., -1.0156585, 0.],
        [0., -1.03402423, 0.],
        [0., -1.05255, 0.],
        [0., -1.0712349, 0.],
        [0., -1.09007808, 0.],
        [0., -1.10907867, 0.],
        [0., -1.12823581, 0.],
        [0., -1.14754865, 0.],
        [0., -1.16701637, 0.],
        [0., -1.18663811, 0.],
        [0., -1.20641306, 0.],
        [0., -1.2263404, 0.]
    ]).T
    SIMULATION_INITIAL_STATE = STATE
    SIMULATION_LENGTH = 5 * TIME_STEP
    SIMULATION_CONTROLLER = FixedInputController(ACTION)
    SIMULATION_STATES = np.array([
        [0.4, 0.4055, 0.41102965, 0.41658889, 0.42217775],
        [-0.1, -0.1065, -0.11300697, -0.11952086, -0.12604159],
        [1.1, 1.10592904, 1.11184861, 1.11777211, 1.12371282],
        [-1.3, -1.30139399, -1.30277703, -1.30414607, -1.30549805],
        [-0.1472441, -0.1473091, -0.14763701, -0.1482264, -0.14907582],
        [-0.013, -0.06558262, -0.11787728, -0.16988515, -0.22160741]
    ])
    SIMULATION_ACTIONS = np.tile(ACTION, (1, 5))

    @staticmethod
    def _get_plant_cls():
        return QuadRotor2DPlant

    def _get_plant_parameters(self):
        return {
            "dt": self.TIME_STEP,
            "integrator": "euler",
            "blade_flapping": True,
        }

    def _get_other_plant_parameters(self):
        return {
            "dt": self.TIME_STEP + 0.01,
            "integrator": "euler",
            "blade_flapping": True,
        }

    def _generate_plant(self):
        plant = self._get_plant_cls()(**self._get_plant_parameters())
        return plant

    def test_get_power_by_voltage(self):
        plant = self._generate_plant()
        rotor_speeds = self.OLD_ROTOR_SPEEDS
        new_rotor_speeds, power = plant.get_power_by_voltage(rotor_speeds, self.INPUT_VOLTAGE)
        assert_array_almost_equal(
            new_rotor_speeds,
            self.ROTOR_SPEEDS,
            decimal=8
        )
        assert_array_almost_equal(
            power,
            self.POWER,
            decimal=8
        )

    def test_preprocess_state_action(self):
        plant = self._generate_plant()
        preprocessed_state, preprocessed_action = plant.preprocess_state_action(self.STATE, self.ACTION)
        assert_array_almost_equal(
            preprocessed_state,
            self.PREPROCESSED_STATE,
            decimal=8
        )
        assert_array_almost_equal(
            preprocessed_action,
            self.PREPROCESSED_ACTION
        )
        assert_array_almost_equal(
            plant.preprocess_state_action(
                self.STATE,
                np.array([[2e5, 0]]).T
            )[1],
            plant._ROTOR_SPEED_SATURATION[:, 1:]
        )

    def test_postprocess_next_state(self):
        plant = self._generate_plant()
        assert_array_almost_equal(
            plant.postprocess_next_state(
                np.array([[
                    0.4, 0, -0.1,
                    1.1, 0, -1.3,
                    0.99729112, 0., -0.07355556, 0.,
                    0, -0.013, 0,
                ]]).T
            ),
            self.STATE
        )

    def test_validate_plant_dynamics(self):
        plant = self._generate_plant()
        sim = plant.simulate(self.VALIDATION_LENGTH, self.SIMULATION_CONTROLLER, initial_state=self.STATE)
        states = sim.get_states()
        assert_array_almost_equal(
            np.array([states[0, :], np.zeros(states.shape[1]), states[1, :]]),
            self.VALIDATION_XYZ,
            decimal=8
        )
        assert_array_almost_equal(
            np.array([
                np.zeros(states.shape[1]),
                states[4, :],
                np.zeros(states.shape[1]),
            ]),
            self.VALIDATION_ATTITUDE,
            decimal=8
        )
        assert_array_almost_equal(
            sim.get_actions(),
            self.ACTION.repeat(states.shape[1], axis=1),
            decimal=8
        )
